import {Client as JsonRpc} from '@browseth/jsonrpc';
import {All} from '@browseth/internal-types/jsonrpc-methods';
import {Node} from '@browseth/node-default';

export enum InfuraNetEnum {
  mainnet = 'mainnet',
  ropsten = 'ropsten',
  infuranet = 'infuranet',
  kovan = 'kovan',
  rinkeby = 'rinkeby',
}

export interface ConstructorParams {
  netEnum?: InfuraNetEnum;
  apikey: string;
}

export class InfuraNode extends Node<All> {
  private jsonrpc: JsonRpc<All>;
  public async send<Method extends keyof All>(
    method: Method,
    params: All[Method]['params'],
  ): Promise<All[Method]['result']> {
    const resp = await this.jsonrpc.request(method, params);
    return resp.result;
  }

  constructor(params: ConstructorParams) {
    super();

    this.jsonrpc = new JsonRpc(
      `https://${params.netEnum || InfuraNetEnum.mainnet}.infura.io/${
        params.apikey
      }`,
    );
  }
}
