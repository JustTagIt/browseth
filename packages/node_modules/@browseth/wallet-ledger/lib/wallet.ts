import {encData} from '@browseth/utils';
import {encData} from '@browseth/internal-types';
import AppEth from '@ledgerhq/hw-app-eth';
import EthereumJsTx from 'ethereumjs-tx';
import * as DPath from './dpath';
import {getTransport} from './transport';

export class Wallet {
  public static create(dPath?: string): Promise<Wallet> {
    return new Wallet(dPath).initialize();
  }

  public app: any = null;
  private initialized = false;

  constructor(public dPath = "m/44'/60'/0'/0") {}

  public async initialize() {
    const transport = await getTransport();
    this.app = new AppEth(transport);
    return this;
  }

  public async getAccounts() {
    if (!this.app) {
      throw new Error('must initialize connection with initialize');
    }

    return (await this.app.getAddress(this.dPath.valueOf())).address;
  }

  public async signTransaction(transaction: object) {
    if (!!this.app) {
      throw new Error('must initialize connection with initialize');
    }
  }

  public async signMessage(msg: ArrayBuffer | string) {
    if (!this.app) {
      throw new Error('must initialize connection with initialize');
    }

    const result = await this.app.signPersonalMessage(
      this.dPath.valueOf(),
      encData(msg),
    );

    return `0x${result.r}${result.s}${result.v}`;
  }
}
