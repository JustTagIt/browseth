export type IData = string;
export type IQuantity = string | number;
export type ITag = 'earliest' | 'latest' | 'pending' | IQuantity;

export type OData = string;
export type OQuantity = string;
export interface OBlockObject {
  number?: OQuantity;
  hash?: OData;
  parentHash: OData;
  nonce?: OData;
  sha3Uncles: OData;
  logsBloom?: OData;
  transactionsRoot: OData;
  stateRoot: OData;
  receiptsRoot: OData;
  miner: OData;
  difficulty: OQuantity;
  totalDifficulty: OQuantity;
  extraData: OData;
  size: OQuantity;
  gasLimit: OQuantity;
  gasUsed: OQuantity;
  timestamp: OQuantity;
  transactions: Array<OData | OTransactionObject>;
  uncles: OData[];
}

export interface OTransactionObject {
  hash: OData;
  nonce: OQuantity;
  blockHash: OData;
  blockNumber: OQuantity;
  transactionIndex: OQuantity;
  from: OData;
  to?: OData;
  value: OQuantity;
  gasPrice: OQuantity;
  gas: OQuantity;
  input: OData;
}

export interface OLog {
  removed: boolean;
  logIndex: OQuantity;
  transactionIndex: OQuantity;
  transactionHash: OData;
  blockHash: OData;
  blockNumber: OQuantity;
  address: OData;
  data: OData;
  topics: Array<OData | [OData, OData]>;
}

export interface OTransactionReceipt {
  transactionHash: OData;
  transactionIndex: OQuantity;
  blockHash: OData;
  blockNumber: OQuantity;
  cumulativeGasUsed: OQuantity;
  gasUsed: OQuantity;
  contractAddress: OQuantity;
  logs: ReadonlyArray<OLog>;
  logsBloom: OData;
  root: OData;
  status: OData;
}
