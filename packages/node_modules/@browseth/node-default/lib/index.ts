import {
  ApiAbstract,
  RequestObject,
  RequestOptions,
  Response,
  ResponseObject,
} from '@browseth/internal-types/jsonrpc';
import {All} from '@browseth/internal-types/jsonrpc-methods';
import {IData, IQuantity, ITag} from '@browseth/internal-types/jsonrpc-types';

export class Node<Api extends ApiAbstract = All> {
  public send<Method extends keyof Api>(
    method: Method,
    params: Api[Method]['params'],
  ): Promise<Api[Method]['result']> {
    return null!;
  }

  private id: number = 0;

  public getAccount() {
    return this.send('eth_coinbase', []);
  }

  public getAllAccounts() {
    return this.send('eth_accounts', []);
  }

  public getBalance(address: IData, tag: ITag) {
    return this.send('eth_getBalance', []);
  }

  public getChainId() {
    return this.send('net_version', []);
  }

  public getGasPrice() {
    return this.send('eth_gasPrice', []);
  }

  public estimateGas(
    transaction: {
      data?: IData;
      from?: IData;
      gas?: IQuantity;
      gasPrice?: IQuantity;
      nonce?: IQuantity;
      to?: IData;
      value?: IQuantity;
    },
    tag: ITag,
  ) {
    return this.send('eth_estimateGas', [transaction, tag]);
  }

  public ethCall(
    transaction: {
      to: IData;
      data?: IData;
      from?: IData;
      gas?: IQuantity;
      gasPrice?: IQuantity;
      nonce?: IQuantity;
      value?: IQuantity;
    },
    tag: ITag,
  ) {
    return this.send('eth_call', [transaction, tag]);
  }

  public sendTransaction(transaction: {
    from: IData;
    gasPrice: IQuantity;
    to: IData;
    data?: IData;
    gas?: IQuantity;
    nonce?: IQuantity;
    value?: IQuantity;
  }) {
    return this.send('eth_sendTransaction', [transaction]);
  }

  public async signMessage(message: IData) {
    return this.send('eth_sign', [await this.getAccount(), message]);
  }
}
